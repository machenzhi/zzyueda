<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-3.2.xsd
						http://www.springframework.org/schema/jdbc
						http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
						http://www.springframework.org/schema/jee 
						http://www.springframework.org/schema/jee/spring-jee-3.2.xsd 
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
						http://www.springframework.org/schema/data/jpa 
						http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd 
						http://www.springframework.org/schema/util
						http://www.springframework.org/schema/util/spring-util-3.2.xsd 
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
	<!-- 读取jdbc配置文件 -->
	<util:properties id="jdbc" location="classpath:resource.properties" />
	<!-- 配置数据源 -->
	<bean id="ds" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="#{jdbc.driver}" />
		<property name="url" value="#{jdbc.url}" />
		<property name="username" value="#{jdbc.user}" />
		<property name="password" value="#{jdbc.pwd}" />
		<property name="maxActive" value="#{jdbc.maxActive}" />
		<property name="maxIdle" value="#{jdbc.maxIdle}" />
		<property name="maxWait" value="#{jdbc.maxWait}" />
		<property name="minIdle" value="#{jdbc.minIdle}" />
		<property name="initialSize" value="#{jdbc.initSize}" />
	</bean>
	<!-- 配置SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 依赖数据源 -->
		<property name="dataSource" ref="ds" />
		<!-- 指定要扫描的所有映射配置文件 com/rixin/*/model/*.xml -->
		<property name="mapperLocations" value="classpath:com/rixin/**/*.xml" />
	</bean>
	<!-- 配置MyBatis注解 -->
	<!-- Spring会根据这段配置，自动扫描带有指定注解的接口， 然后自动创建这个接口的实现类， 并使用对应的xml 中的SQL来实现对应的方法。 
		即，Spring会自动扫描指定包下，带有注定注解的接口。 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 指定要扫描的包 -->
		<property name="basePackage" value="com.rixin" />
		<!-- 指定要扫描的注解，需要自定义 -->
		<property name="annotationClass" value="com.rixin.common.annotation.MyBatisDao" />
	</bean>


	<!-- 开启注解扫描，支持IOC -->
	<context:component-scan base-package="com.rixin" />

	<!-- 开启MVC注解，支持Spring MVC -->
	<mvc:annotation-driven />
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<!-- 配置js，css等静态文件直接映射到对应的文件夹 -->
	<mvc:resources location="/WEB-INF/js/**" mapping="/js" />
	<mvc:resources location="/WEB-INF/css/**" mapping="/css" />
	<mvc:resources location="/WEB-INF/images/**" mapping="/images" />

	<!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true" />
	<!-- 开启注解事务 只对当前配置文件有效 -->
	<tx:annotation-driven transaction-manager="txManager" />

	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="ds" />
	</bean>
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="upload*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config expose-proxy="true">
		<!-- 只对业务逻辑层实施事务 -->
		<aop:pointcut id="txPointcut" expression="execution(* com..service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>

	<!-- 注册拦截器 -->
	<mvc:interceptors>
		<!-- 登录检查拦截器 -->
		<mvc:interceptor>
			<!-- 第一个*代表Controller类的访问路径； 第二个*代表Controller方法的访问路径； 即所有的方法都要受此拦截器检查。 -->
			<mvc:mapping path="/**" />
			<!-- 以下方法不受检查。 -->
			<mvc:exclude-mapping path="/**/qiantai/**/*.do" />
			<mvc:exclude-mapping path="/**/wechat/**/*.do" />
			<mvc:exclude-mapping path="/common/gotoQiantaiPage.do" />
			<mvc:exclude-mapping path="/user/login.do" />
			<bean class="com.rixin.common.interceptor.CheckLoginInterceptor" />
		</mvc:interceptor>

		<!-- 前台请求必做操作拦截器 -->
		<mvc:interceptor>
			<!-- 第一个*代表Controller类的访问路径； 第二个*代表Controller方法的访问路径； 即所有的方法都要受此拦截器检查。 -->
			<mvc:mapping path="/**/qiantai/**" />
			<bean class="com.rixin.common.interceptor.QianTaiTodoInterceptor" />
		</mvc:interceptor>

		<!-- 后台请求必做操作拦截器 -->
		<mvc:interceptor>
			<!-- 第一个*代表Controller类的访问路径； 第二个*代表Controller方法的访问路径； 即所有的方法都要受此拦截器检查。 -->
			<mvc:mapping path="/**/add*.do" />
			<mvc:mapping path="/**/create*.do" />
			<mvc:mapping path="/**/update*.do" />
			<mvc:mapping path="/**/delete*.do" />
			<bean class="com.rixin.common.interceptor.DeleteHtmlInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<!-- 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
		<property name="maxUploadSize" value="-1" />
		<property name="uploadTempDir" value="fileUpload/temp"></property>
		<!-- defaultEncoding="UTF-8" 是请求的编码格式，默认为iso-8859-1 maxUploadSize="5400000" 
			是上传文件的大小，单位为字节 uploadTempDir="fileUpload/temp" 为上传文件的临时路径 -->
	</bean>

	<!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->
				<prop
					key="org.springframework.web.multipart.MaxUploadSizeExceededException">error_fileupload</prop>
			</props>
		</property>
	</bean>
</beans>
